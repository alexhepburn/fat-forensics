import pytest
import numpy as np

from fatf.utils.models import KNN
from fatf.transparency.models.feature_importance import \
    (individual_conditional_expectation,
    partial_dependence)
from fatf.exceptions import IncompatibleModelError, IncorrectShapeError


numerical_array = np.array(
        [[0, 0, 0.08, 0.69],
        [1, 0, 0.03, 0.29],
        [0, 1, 0.99, 0.82],
        [2, 1, 0.73, 0.48],
        [1, 0, 0.36, 0.89],
        [0, 1, 0.07, 0.21]])

test_numerical_array = np.array(
        [[1, 0, 0.03, 0.5],
        [0, 0, 0.56, 0.32]])

structure_array = np.array([
        (0, 0, 0.08, 0.69),
        (1, 0, 0.03, 0.29),
        (0, 1, 0.99, 0.82),
        (2, 1, 0.73, 0.48),
        (1, 0, 0.36, 0.89),
        (0, 1, 0.07, 0.21)], dtype=[('a', 'i'), ('b', 'i'), ('c', 'f'), ('d', 'f')])

test_structure_array = np.array([
        (1, 0, 0.03, 0.5),
        (0, 0, 0.56, 0.32)], dtype=[('a', 'i'), ('b', 'i'), ('c', 'f'), ('d', 'f')])

string_structure_array = np.array([
    ('a', 'b', 'c'),
    ('a', 'f', 'g'),
    ('b', 'c', 'c')], dtype=[('feat1', 'U'), ('feat2', 'U'), ('feat3', 'U')])

string_test_structure_array = np.array([
    ('a', 'f', 'g'),
    ('b', 'f', 'c')], dtype=[('feat1', 'U'), ('feat2', 'U'), ('feat3', 'U')])


results = np.array([
    [[1., 0., 0.],
    [1., 0., 0.],
    [1., 0., 0.]],

    [[0., 0., 1.],
    [0.5, 0., 0.5],
    [0.5, 0., 0.5]]])

values = np.array([0.32, 0.41, 0.5])

results_cat = np.array([
    [[0.5, 0, 0.5],
    [1., 0., 0.]],

    [[0., 0., 1.],
    [1., 0., 0.]]])

values_cat = np.array([0., 1.])
values_cat_struct = np.array([0, 1], dtype='i')
'''
results_string = np.array([
    [[],
    []],

    [[],
    []]])
'''
values_str = np.array(['g', 'c'], dtype='U')

model_err_msg = ('Partial dependence and individal conditional expectiations '
                 'requires model object to have method predict_proba().')
incorrect_shape_msg = ('X must be 2-dimensional array.')
indices_error_msg = ('Invalid features [10] given.')
categorical_steps_warning = ('Feature is defined as categorical but number of '
                             'steps is defined. The numer of steps used will '
                             'be the number of unique values in the dataset '
                             'for feature.')
is_categorical_false_warning = ('Feature %s is not numerical and not specified '
                                'as categorical. Samples will be generated by '
                                'using values contained in the dataset.')
class InvalidModel(object):
    """Class to test if exception when model does not have
    predict_proba(x) method.
    """
    def __init__(self):
        pass
    def predict(self):
        pass

def test_individual_conditional_expectation():
    predictor = KNN(k=2)
    predictor.fit(numerical_array, np.array([2, 0, 1, 1, 0, 2]))
    with pytest.raises(IncorrectShapeError) as exin:
        individual_conditional_expectation(np.ones((6, 4, 4)), predictor, 3, 
                                           steps=3)
    assert str(exin.value) == incorrect_shape_msg

    invalid_model = InvalidModel()
    with pytest.raises(IncompatibleModelError) as exin:
        individual_conditional_expectation(test_numerical_array, invalid_model,
                                           3, steps=3)
    assert str(exin.value) == model_err_msg

    with pytest.raises(ValueError) as exin:
        individual_conditional_expectation(test_numerical_array, predictor, 
                                           10, steps=3)
    assert str(exin.value) == indices_error_msg

    ice = individual_conditional_expectation(test_numerical_array, predictor, 
                                             3, steps=3)
    assert np.allclose(ice[0], results)
    assert np.allclose(ice[1], values)

    with pytest.raises(UserWarning) as exin:
        ice_cat = individual_conditional_expectation(test_numerical_array, 
                                                     predictor, 0, 
                                                     is_categorical=True,
                                                     steps=3)
    assert str(exin.value) == categorical_steps_warning
    ice_cat = individual_conditional_expectation(test_numerical_array, 
                                                 predictor, 0, 
                                                 is_categorical=True)
    assert np.allclose(ice_cat[0], results_cat)
    assert np.allclose(ice_cat[1], values_cat)

    predictor_struct = KNN(k=2)
    predictor_struct.fit(structure_array, np.array([2, 0, 1, 1, 0, 2]))

    ice_struct = individual_conditional_expectation(test_structure_array, 
                                                    predictor_struct, 'd', 
                                                    steps=3)
    assert np.allclose(ice_struct[0], results)
    #conversations make ice_struct[1] = [0.300000001, 0.40000001, 0.5]
    assert np.allclose(ice_struct[1], values, atol=1e-7)

    ice_struct_cat = individual_conditional_expectation(test_structure_array, 
                                                        predictor_struct, 'a', 
                                                        is_categorical=True)
    assert np.allclose(ice_struct_cat[0], results_cat) 
    assert np.allclose(ice_struct_cat[1], values_cat_struct)

    predictor_string = KNN(k=2)
    predictor_string.fit(string_structure_array, np.array([0, 1, 1]))
    with pytest.raises(UserWarning) as exin:
        ice_struct_str = individual_conditional_expectation(
                            string_test_structure_array, 
                            predictor_string, 
                            'feat3')
    assert str(exin.value) == is_categorical_false_warning

def test_partial_dependence():
    predictor = KNN(k=2)
    predictor.fit(numerical_array, np.array([2, 0, 1, 1, 0, 2]))
    with pytest.raises(IncorrectShapeError) as exin:
        partial_dependence(np.ones((6, 4, 4)), predictor, 3, steps=3)
    assert str(exin.value) == incorrect_shape_msg

    invalid_model = InvalidModel()
    with pytest.raises(IncompatibleModelError) as exin:
        partial_dependence(test_numerical_array, invalid_model, 3, 
                                            steps=3)
    assert str(exin.value) == model_err_msg

    with pytest.raises(ValueError) as exin:
        partial_dependence(test_numerical_array, predictor, 10, steps=3)
    assert str(exin.value) == indices_error_msg

    pd = partial_dependence(test_numerical_array, predictor, 3, steps=3)
    assert np.allclose(pd[0], np.mean(results, axis=0))
    assert np.allclose(pd[1], values)

    with pytest.raises(UserWarning) as exin:
        pd_cat = partial_dependence(test_numerical_array, predictor, 0, 
                                    is_categorical=True, steps=3)
    assert str(exin.value) == categorical_steps_warning
    pd_cat = partial_dependence(test_numerical_array, predictor, 0, 
                                is_categorical=True)
    assert np.allclose(pd_cat[0], np.mean(results_cat, axis=0))
    assert np.allclose(pd_cat[1], values_cat)

    predictor_struct = KNN(k=2)
    predictor_struct.fit(structure_array, np.array([2, 0, 1, 1, 0, 2]))

    pd_struct = partial_dependence(test_structure_array, predictor_struct, 
                                   'd', steps=3)
    assert np.allclose(pd_struct[0], np.mean(results, axis=0))
    #conversations make ice_struct[1] = [0.300000001, 0.40000001, 0.5]
    assert np.allclose(pd_struct[1], values, atol=1e-7)

    pd_struct_cat = partial_dependence(test_structure_array, predictor_struct, 
                                       'a', is_categorical=True)
    assert np.allclose(pd_struct_cat[0], np.mean(results_cat, axis=0))
    assert np.allclose(pd_struct_cat[1], values_cat_struct)
